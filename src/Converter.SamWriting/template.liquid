AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template genrated by gensam.
  Included files:
{% for f in model.IncludedFiles -%}
  {{f}}
{% endfor -%}

Globals:
  Function:
    Runtime: {{model.FunctionGlobals.Runtime}}
    Timeout: {{model.FunctionGlobals.Timeout}}
    MemorySize: 128
{% if model.FunctionGlobals.EnvironmentVariables.size > 0 -%}
    Environment:
      Variables:
{% for env in model.FunctionGlobals.EnvironmentVariables -%}
        {{env.Key}}: {{env.Value}}
{% endfor -%}
{% endif -%}
{% if model.IsCorsEnabled -%}

  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: $Sub "'${AllowedDomains}'"
{% endif -%}

{% if model.IsCorsEnabled -%}
Parameters:
  AllowedDomains:
    Type: String
    Default: '*'
    Description: The allowed domains to access the REST API over CORS

{% endif -%}
Resources:

{% if model.Functions.size > 0 -%}
### Functions ###

{% for f in model.Functions -%}
  {{f.Name}}:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: {% include 'FunctionCodeUri' with f %}
      Handler: {% include 'FunctionHandler' with f %}
{% if f.EnvironmentVariables.size > 0 -%}
      Environment:
        Variables:
{% for env in f.EnvironmentVariables -%}
          {{env.Key}}: {{env.Value}}
{% endfor -%}
{% endif -%}
{% if f.Policies.size > 0 -%}
      Policies:
{% for p in f.Policies -%}
        - {{p.Key}}:
            {{p.Value}}
{% endfor -%}
{% endif -%}
{% if f.Events.size > 0 -%}
      Events:
{% for e in f.Events -%}
        {{e.Name}}:
          Type: {{e.Type}}
{% if e.Properties != null -%}
          Properties:
{% include 'yaml' with e.Properties -%}
{% endif -%}
{% endfor -%}
{% endif -%}

{% endfor -%}
{% endif -%}
{% if model.Tables.size > 0 -%}
### Tables ###

{% for t in model.Tables -%}
  {{t.Name}}:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'PK'
          AttributeType: 'S'
        - AttributeName: 'SK'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'PK'
          KeyType: 'HASH'
        - AttributeName: 'SK'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST
{% if t.IsStreamEnabled -%}
      StreamSpecification:
        StreamViewType: NEW_IMAGE
{% endif -%}
      SSESpecification:
        SSEEnabled: true

{% endfor -%}
{% endif -%}
{% if model.Buckets.size > 0 -%}
### S3 Buckets ###

{% for b in model.Buckets -%}
  {{b.Name}}:
    Type: AWS::S3::Bucket
{% if b.IsCorsEnabled -%}
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - !Sub "${AllowedDomains}"
{% endif -%}

{% endfor -%}
{% endif -%}
{% if model.Topics.size > 0 -%}
### SNS Topics ###

{% for t in model.Topics -%}
  {{t}}:
    Type: AWS::SNS::Topic

{% endfor -%}
{% endif -%}
{% if model.Queues.size > 0 -%}
### SQS Queues ###

{% for q in model.Queues -%}
  {{q}}:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60

{% endfor -%}
{% endif -%}
{% if model.QueuePoliciesPerTopic.size > 0 -%}
### SQS Queue Policies per SNS Topic ###

{% for policy in model.QueuePoliciesPerTopic -%}
  QueuePolicyFor{{policy.Key}}:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'sqs:SendMessage'
            Resource:
{% assign queues = policy.Value | Uniq -%}
{% for q in queues -%}
              - !GetAtt {{q}}.Arn
{% endfor -%}
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref {{policy.Key}}
      Queues:
{% for q in queues -%}
        - !Ref {{q}}
{% endfor -%}

{% endfor -%}
{% endif -%}
{% if model.QueueTopicSubscriptions.size > 0 -%}
### SQS Queue Subscription to SNS ###

{% for sub in model.QueueTopicSubscriptions -%}
  {{sub.Queue}}{{sub.Topic}}:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref {{sub.Topic}}
      Endpoint: !GetAtt {{sub.Queue}}.Arn
      Protocol: sqs
      FilterPolicy:
{% include 'yaml' with sub.FilterPolicy -%}

{% endfor -%}
{% endif -%}
{% if model.HasRestApi -%}
Outputs:
  ApiEndpoint:
    Description: 'API endpoint'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
{% endif -%}